{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>Welcome to this documention guide for PyCharm . We will guide you on Cloning a GitHub Repository, Inserting Command Line Parameters, and Debugging. This documentation will also provide further information about relevant PyCharm features for those with little PyCharm experience. PyCharm is an IDE mainly used for Python development. Its areas of usage are diverse, ranging from front-end such as web development to back-end such as data analysis and machine learning.</p>"},{"location":"#intended-users","title":"Intended Users","text":"<p>Our documentation guide is tailored for users who:</p> <ul> <li>have some basic to intermediate programming knowledge </li> <li>are new or have little experience using PyCharm</li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Please ensure you meet the following requirements: </p> <ul> <li>have PyCharm Professional already installed. (Please note that PyCharm Edu/Community may be slightly different.)</li> <li>have a GitHub account</li> <li>know what a GitHub repository is</li> </ul>"},{"location":"#procedures-overview","title":"Procedures Overview","text":"<p>This documentation is mainly divided into:</p> <ul> <li>Cloning a GitHub Repository</li> <li>Command Line Arguments</li> <li>Debugging</li> </ul>"},{"location":"#typographical-conventions","title":"Typographical Conventions","text":"<p>Text in orange are in the glossary.</p> <p>We will be using the following message blocks for information you should keep note of:</p> <p>Note</p> <p>Additional information</p> <p>Warning</p> <p>Information that you must read </p> <p>Failure</p> <p>Shows what failure looks like</p> <p>Success</p> <p>Shows what success looks like</p>"},{"location":"clone/","title":"Cloning a GitHub Repository","text":"<p>By cloning the GitHub repository, you copy the project from the remote location to your local computer. The purpose of cloning a remote GitHub Repository is so that you write code locally and push the modified content to the remote repository. </p>"},{"location":"clone/#how-to-clone-a-repository","title":"How to Clone a Repository:","text":"<ol> <li>Go to the repository you want to clone on GitHub.</li> <li>Click on \"Code\".</li> <li>Copy the URL that pops up.</li> </ol> <p>  4. Go to the Welcome Screen of PyCharm.  5. Click on \"Get From VCS\".</p> <p>  6. Paste the link you copied earlier into the field.</p> <p>  7. Click on \"Clone\".   8. Click on Trust Project </p> <p>Success</p> <p>If the repository is succesfully cloned, the new repository will automatically pop up</p> <p>Failure</p> <p>A notification similar to the image below will appear if there is an error in cloning the repository.  </p>"},{"location":"clone/#stop-cloning","title":"Stop Cloning","text":"<p>If you have started cloning the repository but want to stop it:</p> <ol> <li>Click on the X button on the right of the progress bar.</li> </ol> <p></p> <ol> <li>In the dialog that appears, click Stop. If you don't want to stop the cloning process, click Cancel.</li> </ol> <p></p>"},{"location":"clone/#conclusion","title":"Conclusion","text":"<p>At the end of this section, you should now know how to:</p> <ul> <li> Clone a repository</li> <li> Stop cloning</li> </ul>"},{"location":"command/","title":"Command Line Arguments","text":"<p>This section will guide you through inserting command line parameters to your IDE. Program arguments are passed when you want to give specific information to your program during runtime. Environment variables are passed to set system-wide configuration or to store sensitive information.</p> <p>Before you start, make sure that you have your project open.</p>"},{"location":"command/#how-to-add-program-arguments","title":"How to Add Program Arguments:","text":"<ol> <li>From the main menu, select Run | Edit Configurations.</li> </ol> <p>  2. In the Run/Debug Configurations dialog that appears, select which configuration you want to pass the arguments.   3. In the Parameters or Program arguments textbox (depends on your configuration), add the arguments in question. (For ex: sample.txt).  </p> <p>Warning</p> <p>If you have multiple arguments, separate them with spaces.</p> <p>  4. Click on \"Apply\".  5. Click on \"OK\".</p> <p>Success</p> <p>If you are able to successfully pass the program arguments to your code, you should get output without any error messages. </p> <p>Failure</p> <p>If you get error messages, it means that the program arguments were unable to be successfully passed to your code. </p>"},{"location":"command/#how-to-add-environment-variables","title":"How to Add Environment Variables:","text":"<ol> <li>From the main menu, select Run | Edit Configurations.</li> </ol> <p>  2. In the Run/Debug Configurations dialog that appears, select which configuration you want to add the environment variables.   3. Scroll down until you see the Environment Variables textbox.  4. Enter the variable name and value: <code>&lt;name&gt;=&lt;value&gt;</code>. </p> <p>Warning</p> <p>If you have multiple variables, separate them with semicolons.</p> <p>  4. Click on \"Apply\".  5. Click on \"OK\".</p>"},{"location":"command/#conclusion","title":"Conclusion","text":"<p>At the end of this section, you should now know how to:</p> <ul> <li> Add program arguments</li> <li> Add environment variables</li> </ul>"},{"location":"debug/","title":"Debugging","text":"<p>The debugger is a tool to help programmers detect and fix errors (bugs) in their code. It allows programmers to monitor the execution of their programs and examine the state of the program and its variables at specific points in the code.</p> <p>Debuggers allow programmers to step through their code line by line, set breakpoints at specific lines of code, examine the value of variables and data structures, and modify the value of variables to test the effects on the program. Debuggers can also help identify problems in the flow of the program, such as infinite loops or logic errors.  </p>"},{"location":"debug/#general-debugging-procedure","title":"General Debugging Procedure","text":"<p>Note</p> <p>Because the debugging process can vastly vary depending on your needs, we can only provide a general guide on the typical debugging procedure.</p> <p>Before you start, make sure that you have your project open.</p>"},{"location":"debug/#to-start-the-debugger","title":"To Start the Debugger:","text":"<ol> <li>Set a breakpoint by clicking in the gutter at the desired line of code. <p>Note</p> <p>If you need further explanation on breakpoints, read the Breakpoints section below.</p> <p> 2. Click on the Debug icon  on the top right of the program.  3. Click on the arrow icon that suits your requirements.  </p> <p>Note</p> <p>If you need further explanation on each arrow icon, read the Stepping Through the Debugger section below.</p> <p> 4. To end the Debugger, click on the Stop icon  on the top right of the program.  5. Remove the breakpoint by clicking the red circle.</p> <p>Success</p> <p>The debugger window will pop up if you are able to successfully start the debugger. </p> <p>Failure</p> <p>Some error messages will pop up if the debugger is unable to start. </p>"},{"location":"debug/#to-pause-the-debugger","title":"To Pause the Debugger:","text":"<p>While the debugger is executing, you can pause and resume it by using the following buttons on the Debug toolbar:</p> <ul> <li>To pause the debugger, click .</li> <li>To resume the debugger, click  or press \u2318 \u2325 R.</li> </ul>"},{"location":"debug/#to-restart-the-debugger","title":"To Restart the Debugger:","text":"<ul> <li>To restart, click the Rerun button in the Debug toolbar or press \u2318 R.</li> </ul>"},{"location":"debug/#to-stop-the-debugger","title":"To Stop the Debugger:","text":"<ul> <li>To terminate the debugger, click the Stop button  in the Debug toolbar or press \u2318 F2 and if there are multiple processes, select the process to terminate.</li> </ul>"},{"location":"debug/#breakpoints","title":"Breakpoints","text":"<p>Breakpoints mark where you want the debugger to suspend the program execution so that you can examine the program at a deeper level. Breakpoints can be simple (for ex: suspending the program on reaching some line of code) or involve more complex logic (for ex: checking against additional conditions). When a debugger pauses the execution of a program, it is said to be in a suspended state.</p> <p>Note</p> <p>Breakpoints do not disappear upon termination of the Debugger. They must be removed explicitly (aside from temporary breakpoints).</p> <p>PyCharm has two types of breakpoints: line breakpoints and exception breakpoints.</p> <ul> <li>Line breakpoints: suspends the program on reaching the line of code with the breakpoint. This type of breakpoints can be set on any executable line of code.</li> <li>Exception breakpoints: suspend the program when exceptions are thrown. </li> </ul>"},{"location":"debug/#breakpoint-statuses","title":"Breakpoint Statuses","text":"<p>These are the different types of statuses breakpoints can have:</p> Status Explanation Verified Once a debugger session has started, the debugger will assess whether it is possible to freeze the program at the specified breakpoint. If it is possible, the breakpoint will be indicated as verified. Warning If it is technically possible to suspend the program at the specified breakpoint, but there are other issues that may arise, the debugger will give a warning. An instance of this would be when it is impossible to pause the program at one of its method implementations. Invalid When the debugger determines that it is technically impossible to suspend the program at the specified breakpoint, it marks this as invalid. The primary reason for this is often that the line has no executable code. Inactive/dependent If a breakpoint is configured to be disabled until another breakpoint is reached, and this condition has not yet been met, the breakpoint is labeled as inactive or dependent. Muted Breakpoints can be muted if you don't need them to be triggered for some time. This way, you can continue with normal program operation without exiting the debugging session. Once you are ready to resume debugging, you can unmute the breakpoints to reactivate them. (Click the Mute Breakpoints button in the toolbar of the Debug tool window.) Disabled If you delete a breakpoint, its settings will be permanently removed. However, if you want to temporarily deactivate a breakpoint while keeping its configuration, you can disable it instead. (Click View Breakpoints \u2318 \u21e7 F8 and check/uncheck the breakpoint on the list.) Non-suspending If the breakpoint is non-suspending, the debugger will not suspend the program when it hits the breakpoint."},{"location":"debug/#examining-the-debugger","title":"Examining the Debugger","text":""},{"location":"debug/#examine-frames","title":"Examine Frames","text":"<p>The state of the program is captured through frames. When the program is suspended, you can view the current frame stack by clicking on the Frames tab of the Debug tool window.</p> <p></p> <p>A frame in the context of programming represents the currently active method or function call, and it contains the local variables and arguments. As each method is invoked, a new frame is added to the top of the frame stack, and when the method execution is done, the corresponding frame is removed from the stack in a last in, first out order. </p> <p>Examining frames is useful for understanding the specific arguments passed to a method and the state of the calling method at the time of invocation.</p>"},{"location":"debug/#examine-variables","title":"Examine Variables","text":"<p>The Variables tab displays a list of variables that are currently in scope within the selected thread or frame. Examining these variables can be essential in gaining an understanding of why the program is behaving in a particular way.</p> <p>Warning</p> <p>If a particular variable does not appear in the list of variables, it's likely that the variable is currently out of scope for the current frame at the current point of execution.</p> <p></p>"},{"location":"debug/#copy-variables","title":"Copy Variables","text":"<ul> <li>To copy the name of a variable, right-click the variable and select Copy Name.</li> <li>To copy the value of a variable, right-click the variable and select Copy Value \u2318 C.</li> </ul>"},{"location":"debug/#compare-variables-with-clipboard","title":"Compare Variables with Clipboard","text":"<p>If you want to compare two values of variables, you can use the \"Compare Value with Clipboard\" option. This can be particularly useful in situations such as when the variable holds a lengthy string and you need to compare it with another lengthy string.</p> <ol> <li>Copy the content you want to compare</li> <li>Go to the Variables tab, right-click the variable you want to compare with and select Compare Value with Clipboard.</li> <li>View the comparison in the Diff Viewer that opens.</li> </ol>"},{"location":"debug/#view-variables-in-a-dedicated-dialog","title":"View Variables in a Dedicated Dialog","text":"<p>In PyCharm, you can use a dedicated dialog to inspect variables, which can be helpful when you need to monitor a particular variable or object reference while still being able to navigate through different frames and threads.</p> <ul> <li>Right-click the variable on the Variables tab and select Inspect.</li> </ul> <p></p>"},{"location":"debug/#view-variables-as-an-array","title":"View Variables as an Array","text":"<ol> <li>Go to the Variables tab and select an array or a DataFrame.</li> <li>Right-click View as Array/View as DataFrame.</li> <li>The Data View window will open.</li> </ol>"},{"location":"debug/#set-variable-values","title":"Set Variable Values","text":"<p>If you want to test a program under certain conditions or modify its behaviour at runtime, you can do so by setting the variable values.</p> <ol> <li> <p>Go to the Variables tab, right-click a variable, and select Set Value.</p> </li> <li> <p>Enter the value you want to test and press \u23ce.</p> </li> </ol> <p></p>"},{"location":"debug/#stepping-through-the-debugger","title":"Stepping Through the Debugger","text":"<p>In programming, stepping refers to the process of controlling the execution of a program step-by-step. </p> <p>PyCharm offers various stepping actions which you use depending on your requirements. The stepping buttons can be found on the Debug window toolbar.</p> <p></p>"},{"location":"debug/#step-over","title":"Step Over","text":"<p>The \"Step Over\" tool allows you to proceed to the next line of code, regardless of whether it contains any method calls. If the current line does include method calls, the implementation of those methods will be skipped, and you will move directly to the next line of the caller method.</p> <ul> <li>Click the Step Over button or press F8.</li> </ul>"},{"location":"debug/#step-into","title":"Step Into","text":"<p>The \"Step Into\" tool allows you to move into a method to view what is happening inside. This option is useful when you are unsure if the method is producing the correct output.</p> <ul> <li>Click the Step Into button or press F7.</li> </ul> <p>Note</p> <p>In some cases, \"Step Into\" may skip some scripts as they are not typically relevant for debugging purposes.   To customize this list:      1. Go to Settings, Build, Execution, Deployment | Debugger | Stepping (\u2318 Comma).     2. On the Debugger | Stepping page that appears, select Do not step into library scripts if you want to skip all library scripts.     3. To prevent stepping into particular scripts, select the Do not step into scripts checkbox and create a list of these scripts using the toolbar buttons.</p>"},{"location":"debug/#step-into-my-code","title":"Step Into My Code","text":"<p>Select \"Step Into my Code\" if you want to stop debugger from stepping into library classes.</p> <ul> <li>Click the Step Into My Code button (\u2325 \u21e7 F7).</li> </ul>"},{"location":"debug/#smart-step-into","title":"Smart Step Into","text":"<p>Select \"Smart Step Into\" if you have more than one method call on a single line and want to select certain methods to enter with the debugger. </p> <ol> <li>From the main menu, select Run | Debugging Actions | Smart Step Into or press \u21e7 F7.</li> <li>Select the method by either clicking on it or using the arrow keys and press \u23ce/F7.</li> </ol> <p></p> <p>Note</p> <p>\"Smart Step Into\" is automatically used whenever there are several method calls in one line. To turn off this default setting, go to Settings | Build, Execution, Deployment | Debugger | Stepping and unclick the Always do smart step into checkbox.</p>"},{"location":"debug/#step-out","title":"Step Out","text":"<p>The \"Step Out\" tool allows you to exit the current method and move to the caller method.</p> <ul> <li>Click the Step Out button or press \u2325 \u21e7 F8.</li> </ul>"},{"location":"debug/#run-to-cursor","title":"Run to Cursor","text":"<p>\"Run to Cursor\" allows the program to continue running until the position of the caret is reached.</p> <ol> <li>Place the caret at the desired line where you want the program to freeze.</li> <li>Click the Run to Cursor button or press \u2325 F9.</li> <li>Alternatively, you can click on the line number in the gutter to initiate \"Run to Cursor\".</li> </ol>"},{"location":"debug/#force-step-into","title":"Force Step Into","text":"<p>Use \"Force Step Into\" if you want the debugger to step into the method even if it is skipped by the normal Step Into.</p> <ul> <li>Click the Force Step Into button or press \u2325 \u21e7 F7.</li> </ul>"},{"location":"debug/#force-run-to-cursor","title":"Force Run to Cursor","text":"<p>The \"Force Run to Cursor\" tool means the program will continue running until the position of the caret is reached, ignoring all breakpoints encountered along the way.</p> <ol> <li>Place the caret at the desired line where you want the program to freeze.</li> <li>From the main menu, select Run | Debugging Actions | Force Run to Cursor or press \u2318 \u2325 F9.</li> </ol>"},{"location":"debug/#force-step-over","title":"Force Step Over","text":"<p>The \"Force Step Over\" tool moves to the next line of code, even if the current line contains method calls. If any breakpoints are present within the called methods, they will be ignored.</p> <ul> <li>From the main menu, select Run | Debugging Actions | Force Step Over or press \u2325 \u21e7 F8.</li> </ul>"},{"location":"debug/#conclusion","title":"Conclusion","text":"<p>At the end of this section, you should now know:</p> <ul> <li> The general debugging procedure</li> <li> What breakpoints are</li> <li> How to examine the debugger</li> <li> How to step through the debugger</li> </ul>"},{"location":"glossary/","title":"Glossary","text":"Term Definition Breakpoint A marker placed in the code where the debugger will pause execution, allowing programmers to examine the state of the program. Caret In our context, the caret means the cursor. The cursor signfies where new input would be inserted. Clone Creating a local copy of a remote repository. Debugger A tool used to detect and fix errors (bugs) in code, enabling programmers to monitor the execution of their programs and examine the state of the program and its variables at specific points in the code. Exception Breakpoints Breakpoints that suspend the program when exceptions are thrown. Force Run to Cursor A debugger action that continues running the program until the position of the caret is reached, ignoring all breakpoints encountered along the way. Force Step Into A debugger action that steps into a method even if it is skipped by the normal Step Into. Force Step Over A debugger action that moves to the next line of code, ignoring any breakpoints present within the called methods. Frame In the context of programming, a frame represents the currently active method or function call, containing the local variables, arguments, and code context necessary for expression evaluation. Gutter For our purposes, a gutter is the vertical area on the left side of the code editor window. It usually displays various indicators, such as line numbers, breakpoints, and error or warning icons. IDE Integrated Development Environment, a software application that provides a suite of tools for software development. Line Breakpoints Breakpoints that suspend the program on reaching the line of code with the breakpoint. Repository A storage location where code and related files are stored, often used for version control. Run to Cursor A debugger action that continues running the program until the position of the caret is reached. Smart Step Into A debugger action that allows selection of a specific method call to step into when there are multiple method calls on a single line. Step Into A debugger action that moves into a method to view its execution. Step Into My Code A debugger action that stops the debugger from stepping into library classes, focusing on the user's code. Step Out A debugger action that exits the current method and moves to the caller method. Step Over A debugger action that proceeds to the next line of code, skipping any method calls present in the current line. Stepping The process of controlling the execution of a program step-by-step."},{"location":"troubleshoot/","title":"Troubleshooting","text":"Error Probably Cause Action Command Line Arguments Unable to add program arguments Syntax error Please double check that if you have multiple arguments, they are separated with spaces and not semi-colons as that is for environment variables. Cloning a Repository The cloning process is stuck or taking too long Slow internet connection or a large repository Check your internet connection, and consider trying again later. If the repository is large, it might take longer to clone. You can also stop the cloning process and try again later. Unable to clone a GitHub Repository Invalid URL or network issues Double-check the URL you copied from GitHub, and make sure you have a stable internet connection. Debugging Can't debug a Docker run/debug configuration PyCharm has a Debugger tool for Python run/debug configurations Debug the Python script in a Docker container Debugger not responding Infinite loop or deadlock in the code Use the \"Pause\" button to pause the debugger, identify the issue in the code, and fix it before resuming the debugging session. Process of debugging is slow Debugger stops on each exception thrown as well as when the process terminates Go to Run -&gt; View Breakpoints and in the Breakpoints dialog, uncheck the On Raise checkbox."}]}